classdef rectNoiseGridAnalysis < VStimAnalysis

    properties

    end

    properties (Constant)
        trialType = 'imageTrials'
    end

    methods (Hidden)
        %class constructor - name of class should be identical to the visual stimulation with the addition of Analysis
        function [obj] = rectNoiseGridAnalysis(dataObj)
            if nargin==0
                dataObj=[];
            end
            % Call superclass constructor
            obj@VStimAnalysis(dataObj);
        end
    end

    %static methods that are not directly related to the class are defined here
    methods (Static)
        activityTracePhysicalSpacePlot
    end

    methods
        %list of methods in seperate m files
        plotSpatialTuningLFP(obj,params)

        function results=getReceptiveFields(obj,params)
            arguments
                obj
                params.win = [100,500] %[1x2]-[ms] the time window [start,end] post image flip for analysis
                params.bin = 10 %[ms] - bin size temporal resolution for analysis
                params.corssCorrLag = 2000; %the lag in ms in the crosscorr function
                params.delay = 0 %all visual responses are shifted by this value if propagation delay is assumed
                params.minSpkRate = 0.1 %[spk/s] - minimum firing rate for calculating cross corr
                params.overwrite logical = false %if true overwrites results
                params.analysisTime = datetime('now') %extract the time at which analysis was performed   
                params.inputParams = false %if true - prints out the iput parameters so that it is clear what can be manipulated in the method
            end

            %load previous results if analysis was previuosly performed and there is no need to overwrite otherwise continue
            results = obj.isOutputAnalysis(obj.getAnalysisFileName,params.overwrite,nargout==1);
            if ~isempty(results), return, end

            T=obj.getSessionTime;
            s=obj.getSpikeTIcData; %load spike sorting
            SD=obj.getSyncedDiodeTriggers; %get synched triggers

            V = ones(size(obj.VST.stimSequence,1),ceil((T.sessionEndTime-T.sessionStartTime+params.win(2))/params.bin))*obj.VST.visualFieldBackgroundLuminance;
            for i=1:(numel(SD.stimOnFlipTimes)-1)
                p=round((SD.stimOnFlipTimes(i)-T.sessionStartTime)/params.bin):round((SD.stimOnFlipTimes(i+1)-T.sessionStartTime)/params.bin);
                V(:,p)=obj.VST.stimSequence(:,i)*ones(1,numel(p));
            end
            binsInFrame=round(obj.VST.stimDuration*1000/params.bin);
            V(:,p(end)+1:p(end)+binsInFrame)=obj.VST.stimSequence(:,end)*ones(1,binsInFrame); %add last frames based on the duration of each noise stim
            V=V-obj.VST.visualFieldBackgroundLuminance;

            totWinBins=ceil((T.sessionEndTime-T.sessionStartTime+params.win(2))/params.bin);
            M=squeeze(BuildBurstMatrix(s.ic,round((s.t-params.delay)/params.bin),round(T.sessionStartTime/params.bin),totWin));
            
            %plot activity with Stims
            %plot((1:size(M,2))*params.bin,mean(M,1),'k');hold on;line([SD.stimOnFlipTimes-T.sessionStartTime;SD.stimOnFlipTimes-T.sessionStartTime],ylim,'Color','r');
            
            t=((1:totWinBins)-totWinBins/2)*params.bin;
            pRate=find(sum(M,2)>params.minSpkRate/1000*totWinBins*params.bin);
            lag=round(params.corssCorrLag/params.bin);
            mid=round(totWinBins/2+1);
            C=nan(numel(pRate),size(V,1),2*lag+1);
            for i=1:numel(pRate)
                C_tmp=convn(V',M(pRate(i),:)',"same")';
                C(i,:,:)=C_tmp(:,(mid-lag):(mid+lag));
                %plot(t,mean(C,1));
                %imagesc(C);
                %pause;
            end
            C=reshape(C,size(C,1),obj.VST.rectGridSize,obj.VST.rectGridSize,size(C,3));
            RF=squeeze(max(C,[],4));
            RFT=squeeze(mean(mean(C,2),3));
            tRF=t((mid-lag):(mid+lag));

            %{
            plot(tRF,mean(RFT,1))
            imagesc(squeeze(mean(RF,1)))
            
            f=figure;Tl=tiledlayout(8,15,'TileSpacing','tight');
                for i=1:size(RF,1)
                nexttile;imagesc(squeeze(RF(i,:,:)));
                set(gca,'XTick',obj.VST.rectGridSize/2,'XTickLabel',num2str(pRate(i)),'YTickLabel',{});
            end
            %}
            %save results in the right file
            fprintf('Saving results to file.\n');
            save(obj.getAnalysisFileName,'C','RF','tRF','RFT','pRate','lag','params');
        end

        function plotReceptiveFields(obj,params)
            %Generates a few plots with the position spike tuning for the rectGrid stim
            arguments (Input)
                obj
                params.overwrite logical = false %if true overwrites results
                params.analysisTime = datetime('now') %extract the time at which analysis was performed
                params.inputParams = false %if true - prints out the iput parameters so that it is clear what can be manipulated in the method
            end
            if params.inputParams,disp(params),return,end

            C=obj.getReceptiveFields;
            f=figure;Tl=tiledlayout(8,15,'TileSpacing','tight');hL.Visible='off';
            for i=1:size(C.RF,1)
                nexttile;imagesc(squeeze(C.RF(i,:,:)));
                set(gca,'XTick',obj.VST.rectGridSize/2,'XTickLabel',num2str(C.pRate(i)),'YTickLabel',{});
            end
            hL.Visible='on';
            if params.overwrite,obj.printFig(f,'RFs'),end

            f=figure;
            plot(tRF,mean(RFT,1));

            f=figure;
            imagesc(squeeze(mean(RF,1)))

            %obj.VST.pos2X
            %pos2Y
            %obj.VST.rectData
        end
        %Methods in this m file
        function results=getSyncedDiodeTriggers(obj,varargin)
            %Call superclass function but analysis for this visual stimulation should only be done on the on Flips
            %when using the function for receptive field mapping - in other scenarios there may be off flips in which case
            %a condition should be added here
            results=getSyncedDiodeTriggers@VStimAnalysis(obj,'analyzeOnlyOnFlips',true,'ignoreNLastFlips',1,varargin{:}); 
        end
          
    end
end