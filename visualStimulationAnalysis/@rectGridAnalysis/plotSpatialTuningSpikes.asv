function plotSpatialTuningSpikes(obj,params)
%P
arguments (Input)
    obj
    params.overwrite logical = false
    params.analysisTime = datetime('now')
    params.inputParams = false
    params.updatePlots = true
    params.bin = 10 %[ms] - bins size for the generated rasters
    params.win = [500,500] % duration [1,2] [ms] (for on and off) for LFP analysis
end
if params.inputParams,disp(params),return,end

%load diode 
stimTimes=obj.getSyncedDiodeTriggers;

%check that sorting exist
if isdir(obj.spikeSortingFolder)
    if isfile([obj.spikeSortingFolder filesep 'sorting_tIc.mat'])
        s=load([obj.spikeSortingFolder filesep 'sorting_tIc.mat']);
    else
        fprintf('Did not find <strong> sorting_tIc.mat </strong> (t,ic format) in spike sorting folder!\ntrying to convert from Phy format, please wait...\n');
        obj.dataObj.convertPhySorting2tIc(obj.spikeSortingFolder);
        s=load([obj.spikeSortingFolder filesep 'sorting_tIc.mat']);
    end
else
    fprintf('Did not find spike sorting folder, put phy results into a folder starting with <strong> kilosort </strong> and try again,\n');
end

%determine visual stimulation grid
vStimGrid=nan(obj.VST.rectGridSize,obj.VST.rectGridSize);
vStimGrid(sub2ind([obj.VST.rectGridSize',obj.VST.rectGridSize],obj.VST.pos2Y,obj.VST.pos2X))=1:(obj.VST.rectGridSize^2);
vStimGrid=flipud(vStimGrid);

Mspk_on=BuildBurstMatrix(s.ic,round(s.t/params.bin),round(stimTimes.stimOnFlipTimes/params.bin),round(params.win(1)/params.bin));
Mspk_off=BuildBurstMatrix(s.ic,round(s.t/params.bin),round(stimTimes.stimOffFlipTimes/params.bin),round(params.win(1)/params.bin));

[~,pOrdered]=sort(obj.VST.pos);
[nTrials,nNeu,nBins]=size(Mspk_on);

Mspk_on=reshape(Mspk_on(pOrdered,:,:),[obj.VST.trialsPerCategory,nTrials/obj.VST.trialsPerCategory,nNeu,nBins]);
Mspk_off=reshape(Mspk_off(pOrdered,:,:),[obj.VST.trialsPerCategory,nTrials/obj.VST.trialsPerCategory,nNeu,nBins]);

mSpk_on=squeeze(mean(Mspk_on,1));
mSpk_off=squeeze(mean(Mspk_off,1));

f1=figure('Name','On spike responses vs position');hL=tiledlayout(obj.VST.rectGridSize,obj.VST.rectGridSize,'TileSpacing','tight','Padding','tight','Visible','off');
for i=1:obj.VST.rectGridSize^2
    nexttile;
    imagesc(squeeze(mSpk_on(i,:,:)));colormap(flipud(gray(16)))
    set(gca,'XTick',[],'YTick',[],'CLim',[0 1/params.bin]);
end
hL.Visible='on';
if params.updatePlots,obj.printFig(f1,'On_SpkVsPosition'),end

f2=figure('Name','Off spike responses vs position');hL=tiledlayout(obj.VST.rectGridSize,obj.VST.rectGridSize,'TileSpacing','tight','Padding','tight','Visible','off');
for i=1:obj.VST.rectGridSize^2
    nexttile;
    imagesc(squeeze(mSpk_off(i,:,:)));colormap(flipud(gray(16)))
    set(gca,'XTick',[],'YTick',[],'CLim',[0 1/params.bin]);
end
hL.Visible='on';
if params.updatePlots,obj.printFig(f2,'Off_SpkVsPosition'),end

f3=figure('Name','On spike averaged across positions');
imagesc((1:nBins)*params.bin,1:nNeu,squeeze(mean(mSpk_on,2)));colormap(flipud(gray(16)));
clim([0 0.1/params.bin]);
ylabel('Ch #');
xlabel('Time [ms]');
if params.updatePlots,obj.printFig(f3,'On_SpkAvgOnPositions'),end

f4=figure('Name','Off spike averaged across positions');
imagesc((1:nBins)*params.bin,1:nNeu,squeeze(mean(mSpk_off,2)));colormap(flipud(gray(16)));
clim([0 0.1/params.bin]);
ylabel('Ch #');
xlabel('Time [ms]');
if params.updatePlots,obj.printFig(f4,'Off_SpkAvgOnPositions'),end

f5=figure('Name','On spike averaged across electrodes');
h=axes;
activityTracePhysicalSpacePlot(h,1:numel(vStimGrid),squeeze(mean(mSpk_on,2)),vStimGrid,'traceColor',[0.8 0.2 0.2],'DrawElectrodeNumbers',0);
if params.updatePlots,obj.printFig(f5,'On_SpkAvgOnElectrodes'),end

f6=figure('Name','Off spike averaged across electrodes');
h=axes;
activityTracePhysicalSpacePlot(h,1:numel(vStimGrid),squeeze(mean(mSpk_off,2)),vStimGrid,'traceColor',[0.8 0.2 0.2],'DrawElectrodeNumbers',0);
if params.updatePlots,obj.printFig(f6,'Off_SpkAvgOnElectrodes'),end

mM_on=squeeze(mean(Mspk_on,3));
f7=figure('Name','On spike all trials averaged across electrodes');hL=tiledlayout(obj.VST.rectGridSize,obj.VST.rectGridSize,'TileSpacing','tight','Padding','tight','Visible','off');
for i=1:obj.VST.rectGridSize^2
    nexttile;
    imagesc(squeeze(mM_on(:,i,:)));colormap(flipud(gray(16)))
    set(gca,'XTick',[],'YTick',[],'CLim',[0 0.5/params.bin]);
end
hL.Visible='on';
if params.updatePlots,obj.printFig(f7,'On_SpkTrialsVsPosition'),end

mM_off=squeeze(mean(Mspk_on,3));
f8=figure('Name','Off spike all trials averaged across electrodes');hL=tiledlayout(obj.VST.rectGridSize,obj.VST.rectGridSize,'TileSpacing','tight','Padding','tight','Visible','off');
for i=1:obj.VST.rectGridSize^2
    nexttile;
    imagesc(squeeze(mM_off(:,i,:)));colormap(flipud(gray(16)))
    set(gca,'XTick',[],'YTick',[],'CLim',[0 0.5/params.bin]);
end
hL.Visible='on';
if params.updatePlots,obj.printFig(f8,'Off_SpkTrialsVsPosition'),end

f7=figure('Name','On spike all trials averaged across electrodes');
h=axes;
[hPlot]=activityMultiTracePhysicalSpacePlot(h,1:81,permute(squeeze(),[2,1,3]),vStimGrid,'scaling','noOverlap','DrawElectrodeNumbers',0,'traceColor',[0.8 0.2 0.2]);

%[hPlot]=activityMultiTracePhysicalSpacePlot(h,(1:32)',squeeze(M_Int),vStimGrid,'DrawElectrodeNumbers',0,'traceColor',[0.8 0.2 0.2]);
%[hScaleBar]=addScaleBar(h,'scaleFac',1.4);
%activityTracePhysicalSpacePlot(h,IntanData.channelNumbers(:),squeeze(mean(M_Intan(:,pOrdered(1),:),2)),IntanData.chLayoutNumbers,'traceColor',[0.8 0.2 0.2],'DrawElectrodeNumbers',0);

end
