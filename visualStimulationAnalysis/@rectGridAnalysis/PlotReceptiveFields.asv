function PlotReceptiveFields(obj,params)

arguments (Input)
    obj
    params.overwrite logical = false
    params.analysisTime = datetime('now')
    params.inputParams = false
    params.exNeurons = 1;
    params.AllSomaticNeurons = false;
    params.AllResponsiveNeurons = true;
    params.noEyeMoves = false
    params.reduceFactor = 20
    params.allStimParamsCombined = false
    params.RFsDivision = {'On-Off','',''}; %On-Off, luminosities, sizes
    params.eye_to_monitor_distance = 21.5 % Distance from eye to monitor in cm
    params.pixel_size = 33
    params.resolution = 1080
    params.meanAllNeurons = false %get mean of receptive fields
end

if params.inputParams,disp(params),return,end

Stats = obj.ShufflingAnalysis;
RFs = obj.CalculateReceptiveFields;
%Parameters
%check receptive field neurons first
pvals = Stats.pvalsResponse;

responses = obj.ResponseWindow;
uSize = unique(responses.C(:,3));
uLum = unique(responses.C(:,4));


if params.AllSomaticNeurons
    eNeuron = 1:numel(pvals);
    pvals = [eNeuron;pvals(eNeuron)];
elseif params.AllResponsiveNeurons
    eNeuron = find(pvals<0.05);
    pvals = [eNeuron;pvals(eNeuron)];% Select all good neurons if not specified
    if isempty(eNeuron)
        fprintf('No responsive neurons.\n')
        return
    end
else
    eNeuron = params.exNeurons;
    pvals = [eNeuron;pvals(eNeuron)];
end


coorRect = obj.VST.rect';
% reduceFactor = min([params.reduceFactor min(obj.VST.ballSizes)]); %has to be bigger than the smallest ball size
redCoorX = round(coorRect(3)/RFs.params.reduceFactor);
redCoorY = round(coorRect(4)/RFs.params.reduceFactor);

pixel_size = params.pixel_size/(params.resolution/RFs.params.reduceFactor); % Size of one pixel in cm (e.g., 25 micrometers)
monitor_resolution = [redCoorX, redCoorY]; % Width and height in pixels
[theta_x,theta_y] = pixels2eyeDegrees(params.eye_to_monitor_distance,pixel_size,monitor_resolution);

theta_x = theta_x(:,1+(redCoorX-redCoorY)/2:(redCoorX-redCoorY)/2+redCoorY);

if params.noEyeMoves %%%mode quadrant
    %;
else
    RFu = RFs.RFu; %Sum of RFUs

    RFuFilt = RFs.RFuFilt; %Size and dir and lum

end

offsetN = sqrt(max(obj.VST.pos));
TwoDGaussian = fspecial('gaussian',floor(size(RFu,4)/(offsetN/2)),redCoorY/offsetN); %increase size of gaussian by 100%.
hasNotString = find(~cellfun(@isempty, params.RFsDivision)==0); %gives you dimensions (dirs, sizes, or lums) that are to be combined.

if params.meanAllNeurons
    RFuRed =reshape(mean(RFuFilt,6),[size(RFuFilt,1),size(RFuFilt,2),...
        size(RFuFilt,3),size(RFuFilt,4)...
        ,size(RFuFilt,5)]);
    for i = 1:numel(hasNotString) %Take mean of elements that are not going to be compared (like luminosities, or directions, etc)
        RFuRed = mean(RFuRed,hasNotString(i));
        size(RFuRed)
    end

    eNeuron =1;

    RFu = mean(sum(RFu,[1,2,3]),6);

end

for u = eNeuron


    ru = find(eNeuron == u);



    if params.allStimParamsCombined

        % %%%Filter with gaussian:

        RFu = sum(RFu,[1,2,3]);

        figRF=figure;
        imagesc((squeeze(conv2(squeeze(RFu(:,:,:,:,:,ru)),TwoDGaussian,'same'))));

        c = colorbar;
        title(c,'spk/s')

        colormap('turbo')
        title(sprintf('u-%d',u))

        xt = xticks;
        xt = xt((1:2:numel(xt)));
        xticks(xt);
        xticklabels(round(theta_x(1,xt)))

        yt = yticks;
        yt = yt(1:2:numel(yt));
        yticks(yt);
        yticklabels(round(theta_y(yt,1)))

        axis equal tight

        figRF.Position = [ 680   577   156   139];
        if  params.noEyeMoves
            %print(figRF, sprintf('%s-NEM-MovBall-ReceptiveField-eNeuron-%d.pdf',NP.recordingName,u), '-dpdf', '-r300', '-vector');
            if params.overwrite,obj.printFig(figRF,sprintf('%s-NEM-rectGrid-ReceptiveField-eNeuron-%d.pdf',obj.dataObj.recordingName,u)),end
        else
            %print(figRF, sprintf('%s-MovBall-ReceptiveField-eNeuron-%d.pdf',NP.recordingName,u), '-dpdf', '-r300', '-vector');
            if params.overwrite,obj.printFig(figRF,sprintf('%s-rectGrid-ReceptiveField-eNeuron-%d',obj.dataObj.recordingName,u)),end
        end
        close

    end


    %%%% Plot receptive field per direction
    %%%% find max and min of colorbar limits

    cMax = -inf;
    cMin = inf;

    if ~params.meanAllNeurons
        RFuRed =reshape(RFuFilt(:,:,:,:,:,ru),[size(RFuFilt,1),size(RFuFilt,2),size(RFuFilt,3),size(RFuFilt,4)...
            ,size(RFuFilt,5)]);
        for i = 1:numel(hasNotString) %Take mean of elements that are not going to be compared (like luminosities, or directions, etc)
            RFuRed = mean(RFuRed,hasNotString(i));
            size(RFuRed)
        end
    end
  
    cMax = max(RFuRed,[],'all');
    cMin = min(RFuRed,[],'all');

    hasString = find(~cellfun(@isempty, params.RFsDivision)==1); %gives you dimensions (dirs, sizes, or lums) that are to be combined.

    tilesSize = size(RFuFilt,hasString);

    if numel(tilesSize) ==1 %%Create tile grid for RF ploting 
        if tilesSize<4
            tilesSize = [1 tilesSize];
        else
            tilesSize = [floor(tilesSize/2) ceil(tilesSize/2)];
        end
    end

    if numel(tilesSize) ==3 %%Create tile grid for RF ploting
        tilesSize = [tilesSize(1) tilesSize(2)*tilesSize(3)];
    end


    %Create plot
    figRF = figure('Units', 'normalized', 'OuterPosition', [0 0 1 1]); % Full screen figure;
    NeuronLayout = tiledlayout(tilesSize(1),tilesSize(2),"TileSpacing","tight","Padding","tight");

    j=0;

    rspT={'on','off'};

    for r = 1:size(RFuRed,1)
        for l = 1:size(RFuRed,2)
            for s = 1:size(RFuRed,3)

                ax = nexttile;
                imagesc((squeeze(RFuRed(r,l,s,:,:))));

                caxis([cMin cMax]);

                colormap('turbo')
                title(sprintf('respType-%s-Lum-%s-Size-%s',string(rspT{r}),string(uLum(l)),string(uSize(s))))

                %xlim([(redCoorX-redCoorY)/2 (redCoorX-redCoorY)/2+redCoorY])
                xt = xticks;%(linspace((redCoorX-redCoorY)/2,(redCoorX-redCoorY)/2+redCoorY,offsetN*2));
                xt = xt((1:2:numel(xt)));
                xticks(xt);
                xticklabels(round(theta_x(1,xt)))

                yt = yticks;
                yt = yt(1:2:numel(yt));
                yticks(yt);
                yticklabels(round(theta_y(yt,1)))

                j = j+1;
                
                if j ==size(RFuRed,1)*size(RFuRed,2)*size(RFuRed,3)
                    colorbar;
                end
                axis(ax, 'equal'); 
                pbaspect(ax, [1 1 1]);
              
            end
        end
    end

    if ~params.meanAllNeurons
    title(NeuronLayout, sprintf('Unit-%d',u));
    else
        
    figRF.Position = [  0.2328125                     0.315                0.23515625                   0.38125];
    if params.meanAllNeurons
        title(NeuronLayout,'MeanAllUnits');
        if params.overwrite,obj.printFig(figRF,sprintf('%s-%s-MovBall-RF-sep-%s-Mean',...
                obj.dataObj.recordingName,fieldName, strjoin(params.RFsDivision, '&'))),end
        return
    end
    if params.noEyeMoves
       
    else
        if params.overwrite,obj.printFig(figRF,sprintf('%s-%s-MovBall-RF-sep-%s-eNeuron-%d',...
                obj.dataObj.recordingName,fieldName, strjoin(params.RFsDivision, '&'),u)),end
    end

   
   close

end %%%End onDir

end
