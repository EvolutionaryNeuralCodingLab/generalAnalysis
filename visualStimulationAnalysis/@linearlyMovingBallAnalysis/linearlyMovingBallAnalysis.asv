classdef linearlyMovingBallAnalysis < VStimAnalysis

    properties

    end

    properties (Constant)
        trialType = 'videoTrials'
    end

    methods (Hidden)
        %class constructor - name of class should be identical to the visual stimulation with the addition of Analysis
        function [obj] = linearlyMovingBallAnalysis(dataObj)
            if nargin==0
                dataObj=[];
            end
            % Call superclass constructor
            obj@VStimAnalysis(dataObj);
        end
    end

    methods

        function results = setUpAnalysis(obj, params)

            arguments (Input)
                obj
                params.speedChange string = 'OneSpeed'
                params.overwrite logical = false
                params.analysisTime = datetime('now')
                params.inputParams = false
            end
            if params.inputParams,disp(params),return,end

            obj.getSessionTime;

            try
                DiodeCrossings = obj.getSyncedDiodeTriggers;
            catch
                obj.getDiodeTriggers("extractionMethod",'digitalTriggerDiode','overwrite',true); 
                DiodeCrossings = obj.getSyncedDiodeTriggers;
            end
            
            stimOn = DiodeCrossings.stimOnFlipTimes;
            stimOff = DiodeCrossings.stimOffFlipTimes;

            if isfield(obj.VST, 'orientations') %Check if orientations are present (grid inside moving object).
                orientations = [orientations cell2mat(ball.VSMetaData.allPropVal(find(strcmp(ball.VSMetaData.allPropName,'orientations'))))];
            else %No orientations property exist
                orientations = [orientations zeros(1,cell2mat(ball.VSMetaData.allPropVal(find(strcmp(ball.VSMetaData.allPropName,'nTotTrials')))))];
            end
            if isempty(orientations) %orientations property exists but is empty
                orientations = [orientations zeros(1,cell2mat(ball.VSMetaData.allPropVal(find(strcmp(ball.VSMetaData.allPropName,'nTotTrials')))))];
            end
            

            directions = [directions cell2mat(ball.VSMetaData.allPropVal(find(strcmp(ball.VSMetaData.allPropName,'directions'))))];

            offsets = [offsets cell2mat(ball.VSMetaData.allPropVal(find(strcmp(ball.VSMetaData.allPropName,'offsets'))))];

            sizes = [sizes cell2mat(ball.VSMetaData.allPropVal(find(strcmp(ball.VSMetaData.allPropName,'ballSizes'))))];

            speeds = [speeds cell2mat(ball.VSMetaData.allPropVal(find(strcmp(ball.VSMetaData.allPropName,'speeds'))))];

            interStimStats = cell2mat(ball.VSMetaData.allPropVal(find(strcmp(ball.VSMetaData.allPropName,'interTrialDelay'))))*1000;


            % check start and end diode closest to digital trigger on and
            % off

            A = [stimOn directions' offsets' sizes' speeds' orientations'];
            [C indexS] = sortrows(A,[2 3 4 5 6]);

            B = [stimOff directions' offsets' sizes' speeds' orientations'];
            [Coff indexSo] = sortrows(B,[2 3 4 5 6]);


        end


    end
end

%%%1. Get Diode
%%%2. Create A Matrix.
%%%3. Load Kilos0rt and phy results.
%%%4. Create response matrix.
%%%5. Create shuffling analysis